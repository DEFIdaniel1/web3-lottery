{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Lottery__LotteryNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__SendMoreETH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lotteryState",
          "type": "uint256"
        }
      ],
      "name": "error_LotteryUpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "LotteryEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedLotteryWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryState",
      "outputs": [
        {
          "internalType": "enum Lottery.LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "playerIndex",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfc59223bc9f75b917226a74d81f3e805096c821475bcdae58ba5ee733ad8b401",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1221310",
    "logsBloom": "0x
    "blockHash": "0x68858661ef23e0f5da6dc0f75bce9939b4efe4a5fb84fd37845e848e251d5e65",
    "transactionHash": "0xfc59223bc9f75b917226a74d81f3e805096c821475bcdae58ba5ee733ad8b401",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1221310",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "100000000000000000",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "1",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "fd2d882bfd464678a7834ea7c6dd6a30",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Lottery__LotteryNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__SendMoreETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryState\",\"type\":\"uint256\"}],\"name\":\"error_LotteryUpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"LotteryEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedLotteryWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryState\",\"outputs\":[{\"internalType\":\"enum Lottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"playerIndex\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"DEFIdaniel\",\"details\":\"This implements Chainlink VRF v2 and Chainlink Keepers\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This function uses chainlink keeper node calls   When it returns true, can execute the lottery function\"},\"performUpkeep(bytes)\":{\"details\":\"Once `checkUpkeep` is returning `true`, this function is called and it kicks off a Chainlink VRF call to get a random winner.\"}},\"title\":\"A sample lottery contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is for an untamperable, decentralized contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/KeeperBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract KeeperBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5dc972fdf3a524312e68ef6d2e58bcdaf965d08d9415aefa289207350c2bc85a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./KeeperBase.sol\\\";\\nimport \\\"./interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nabstract contract KeeperCompatible is KeeperBase, KeeperCompatibleInterface {}\\n\",\"keccak256\":\"0xfdb84fea1ee213662ae66b95d4f620be73b7af5ede58be3d330b222b9b566d95\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol';\\nimport '@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol';\\nimport '@chainlink/contracts/src/v0.8/KeeperCompatible.sol'; //imports BOTH compatibleInterface & keeperBase\\n\\nerror Lottery__SendMoreETH();\\nerror Lottery__TransferFailed();\\nerror Lottery__LotteryNotOpen();\\nerror error_LotteryUpkeepNotNeeded(\\n    uint256 currentBalance,\\n    uint256 numPlayers,\\n    uint256 lotteryState\\n);\\n\\n/**\\n *   @title A sample lottery contract\\n *   @author DEFIdaniel\\n *   @notice This contract is for an untamperable, decentralized contract\\n *   @dev This implements Chainlink VRF v2 and Chainlink Keepers\\n */\\n\\ncontract Lottery is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    // Type declarations\\n    enum LotteryState {\\n        OPEN,\\n        CALCULATING\\n    }\\n\\n    // State Variables\\n    uint256 private immutable i_entranceFee;\\n    address payable[] private s_players;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint256 private immutable i_interval;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 1;\\n    uint256 private s_lastTimeStamp;\\n    address private s_recentWinner;\\n    LotteryState private s_lotteryState;\\n\\n    // Events\\n    event LotteryEnter(address indexed player);\\n    event RequestedLotteryWinner(uint256 indexed requestId);\\n    event WinnerPicked(address indexed winner);\\n\\n    // Functions\\n    constructor(\\n        address vrfCoordinatorV2, //external contract address. need MOCKS to work\\n        uint256 entranceFee,\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_lotteryState = LotteryState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_interval = interval;\\n    }\\n\\n    // Functions\\n    function enterLottery() public payable {\\n        //require(msg.value > i_entranceFee) //other option. not Gas efficient - revert is cheaper\\n        if (msg.value < i_entranceFee) {\\n            revert Lottery__SendMoreETH();\\n        }\\n        if (s_lotteryState != LotteryState.OPEN) {\\n            revert Lottery__LotteryNotOpen();\\n        }\\n        s_players.push(payable(msg.sender)); //need to typecast address as payable\\n        emit LotteryEnter(msg.sender);\\n    }\\n\\n    /**\\n     *   @dev This function uses chainlink keeper node calls\\n     *   When it returns true, can execute the lottery function\\n     */\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /* performData */\\n        )\\n    {\\n        bool isOpen = (LotteryState.OPEN == s_lotteryState);\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n        bool hasPlayers = (s_players.length > 0);\\n        bool hasBalance = address(this).balance > 0;\\n        // IF all these are met below, it's time to run the lottery\\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\n        return (upkeepNeeded, '0x0');\\n    }\\n\\n    /**\\n     * @dev Once `checkUpkeep` is returning `true`, this function is called\\n     * and it kicks off a Chainlink VRF call to get a random winner.\\n     */\\n    function performUpkeep(\\n        bytes calldata /* performData */\\n    ) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(''); //pass blank calldata\\n        if (!upkeepNeeded) {\\n            revert error_LotteryUpkeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_lotteryState)\\n            );\\n        }\\n        s_lotteryState = LotteryState.CALCULATING;\\n        uint256 s_requestId = i_vrfCoordinator.requestRandomWords( //requestID stores a lot of the request's info for use\\n            i_gasLane, //aka keyHash in docs - gives max price you'll pay for gas\\n            i_subscriptionId, //subscription for contract funding the request\\n            REQUEST_CONFIRMATIONS, //block confirmations required\\n            i_callbackGasLimit, //gas limit you're willing to max out on\\n            NUM_WORDS //how many random numbers you want\\n        );\\n        emit RequestedLotteryWinner(s_requestId);\\n    }\\n\\n    /**\\n     *   @dev Function the Chainlink VRF calls to send money to a random winner\\n     */\\n    function fulfillRandomWords(\\n        uint256, /*requestID*/\\n        uint256[] memory randomWords //not providing requestID\\n    ) internal override {\\n        // remainder will be between 0 and array.length, which will perfectly allow a random selection to fit the array\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n\\n        //reset\\n        s_recentWinner = recentWinner;\\n        s_lotteryState = LotteryState.OPEN;\\n        s_players = new address payable[](0);\\n        s_lastTimeStamp = block.timestamp;\\n\\n        //payout\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(''); //sends all contract value to the recent winner\\n        if (!success) {\\n            revert Lottery__TransferFailed();\\n        }\\n        emit WinnerPicked(recentWinner);\\n    }\\n\\n    // Pure & View Functions\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayer(uint256 playerIndex) public view returns (address) {\\n        return s_players[playerIndex];\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getLotteryState() public view returns (LotteryState) {\\n        return s_lotteryState;\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getLatestTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n}\\n\",\"keccak256\":\"0xa524faf416194dc28bb3a43e586c11aaa19e945c2f24b98ba7f9d5470f07b52b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200185638038062001856833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff16815250508163ffffffff166101208163ffffffff16815250506000600260146101000a81548160ff021916908360018111156200010d576200010c62000330565b5b0217905550426001819055508061014081815250505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b6000819050919050565b620001e881620001d3565b8114620001f457600080fd5b50565b6000815190506200020881620001dd565b92915050565b600067ffffffffffffffff82169050919050565b6200022d816200020e565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a01620001f7565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200027d565b92505060a06200032389828a01620001bc565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e051610100516101205161014051611487620003cf60003960008181610688015261073101526000610520015260006104fd015260006104dc015260006104a00152600081816102fa0152610757015260008181610320015261037401526114876000f3fe6080604052600436106100c25760003560e01c80635f1b0fd81161007f57806391ad27b41161005957806391ad27b414610259578063c1af578514610284578063e55ae4e81461028e578063fd6673f5146102cb576100c2565b80635f1b0fd8146101c55780636b68c03c146101f05780636e04ff0d1461021b576100c2565b806309bc33a7146100c75780631fe543e3146100f2578063320229eb1461011b5780634585e33b14610146578063473f1ddc1461016f57806353a2c19a1461019a575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610c08565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610dbc565b61031e565b005b34801561012757600080fd5b506101306103de565b60405161013d9190610c08565b60405180910390f35b34801561015257600080fd5b5061016d60048036038101906101689190610e73565b6103e8565b005b34801561017b57600080fd5b506101846105e8565b6040516101919190610f01565b60405180910390f35b3480156101a657600080fd5b506101af610612565b6040516101bc9190610c08565b60405180910390f35b3480156101d157600080fd5b506101da610621565b6040516101e79190610c08565b60405180910390f35b3480156101fc57600080fd5b5061020561062e565b6040516102129190610f93565b60405180910390f35b34801561022757600080fd5b50610242600480360381019061023d9190611063565b610645565b60405161025092919061114f565b60405180910390f35b34801561026557600080fd5b5061026e61072d565b60405161027b9190610c08565b60405180910390f35b61028c610755565b005b34801561029a57600080fd5b506102b560048036038101906102b0919061117f565b6108c4565b6040516102c29190610f01565b60405180910390f35b3480156102d757600080fd5b506102e061090b565b6040516102ed9190610c08565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d057337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103c79291906111ac565b60405180910390fd5b6103da8282610917565b5050565b6000600154905090565b600061040260405180602001604052806000815250610645565b509050806104715747600080549050600260149054906101000a900460ff16600181111561043357610432610f1c565b5b6040517fddbb35a8000000000000000000000000000000000000000000000000000000008152600401610468939291906111d5565b60405180910390fd5b6001600260146101000a81548160ff0219169083600181111561049757610496610f1c565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610561959493929190611284565b602060405180830381600087803b15801561057b57600080fd5b505af115801561058f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b391906112ec565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b6000600260149054906101000a900460ff16905090565b600060606000600260149054906101000a900460ff16600181111561066d5761066c610f1c565b5b6000600181111561068157610680610f1c565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600154426106b59190611348565b119050600080600080549050119050600080471190508380156106d55750825b80156106de5750815b80156106e75750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f00000000000000000000000000000000000000000000000000000000000000003410156107af576040517f1eefa5a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156107c3576107c2610f1c565b5b600260149054906101000a900460ff1660018111156107e5576107e4610f1c565b5b1461081c576040517f823ea8bb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c60405160405180910390a2565b60008082815481106108d9576108d861137c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106109325761093161137c565b5b602002602001015161094491906113da565b9050600080828154811061095b5761095a61137c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260146101000a81548160ff021916908360018111156109ef576109ee610f1c565b5b0217905550600067ffffffffffffffff811115610a0f57610a0e610c79565b5b604051908082528060200260200182016040528015610a3d5781602001602082028036833780820191505090505b5060009080519060200190610a53929190610b48565b504260018190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a819061143c565b60006040518083038185875af1925050503d8060008114610abe576040519150601f19603f3d011682016040523d82523d6000602084013e610ac3565b606091505b5050905080610afe576040517f1c94012000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610bc1579160200282015b82811115610bc05782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b68565b5b509050610bce9190610bd2565b5090565b5b80821115610beb576000816000905550600101610bd3565b5090565b6000819050919050565b610c0281610bef565b82525050565b6000602082019050610c1d6000830184610bf9565b92915050565b6000604051905090565b600080fd5b600080fd5b610c4081610bef565b8114610c4b57600080fd5b50565b600081359050610c5d81610c37565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cb182610c68565b810181811067ffffffffffffffff82111715610cd057610ccf610c79565b5b80604052505050565b6000610ce3610c23565b9050610cef8282610ca8565b919050565b600067ffffffffffffffff821115610d0f57610d0e610c79565b5b602082029050602081019050919050565b600080fd5b6000610d38610d3384610cf4565b610cd9565b90508083825260208201905060208402830185811115610d5b57610d5a610d20565b5b835b81811015610d845780610d708882610c4e565b845260208401935050602081019050610d5d565b5050509392505050565b600082601f830112610da357610da2610c63565b5b8135610db3848260208601610d25565b91505092915050565b60008060408385031215610dd357610dd2610c2d565b5b6000610de185828601610c4e565b925050602083013567ffffffffffffffff811115610e0257610e01610c32565b5b610e0e85828601610d8e565b9150509250929050565b600080fd5b60008083601f840112610e3357610e32610c63565b5b8235905067ffffffffffffffff811115610e5057610e4f610e18565b5b602083019150836001820283011115610e6c57610e6b610d20565b5b9250929050565b60008060208385031215610e8a57610e89610c2d565b5b600083013567ffffffffffffffff811115610ea857610ea7610c32565b5b610eb485828601610e1d565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610eeb82610ec0565b9050919050565b610efb81610ee0565b82525050565b6000602082019050610f166000830184610ef2565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610f5c57610f5b610f1c565b5b50565b6000819050610f6d82610f4b565b919050565b6000610f7d82610f5f565b9050919050565b610f8d81610f72565b82525050565b6000602082019050610fa86000830184610f84565b92915050565b600080fd5b600067ffffffffffffffff821115610fce57610fcd610c79565b5b610fd782610c68565b9050602081019050919050565b82818337600083830152505050565b600061100661100184610fb3565b610cd9565b90508281526020810184848401111561102257611021610fae565b5b61102d848285610fe4565b509392505050565b600082601f83011261104a57611049610c63565b5b813561105a848260208601610ff3565b91505092915050565b60006020828403121561107957611078610c2d565b5b600082013567ffffffffffffffff81111561109757611096610c32565b5b6110a384828501611035565b91505092915050565b60008115159050919050565b6110c1816110ac565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111015780820151818401526020810190506110e6565b83811115611110576000848401525b50505050565b6000611121826110c7565b61112b81856110d2565b935061113b8185602086016110e3565b61114481610c68565b840191505092915050565b600060408201905061116460008301856110b8565b81810360208301526111768184611116565b90509392505050565b60006020828403121561119557611194610c2d565b5b60006111a384828501610c4e565b91505092915050565b60006040820190506111c16000830185610ef2565b6111ce6020830184610ef2565b9392505050565b60006060820190506111ea6000830186610bf9565b6111f76020830185610bf9565b6112046040830184610bf9565b949350505050565b6000819050919050565b61121f8161120c565b82525050565b600067ffffffffffffffff82169050919050565b61124281611225565b82525050565b600061ffff82169050919050565b61125f81611248565b82525050565b600063ffffffff82169050919050565b61127e81611265565b82525050565b600060a0820190506112996000830188611216565b6112a66020830187611239565b6112b36040830186611256565b6112c06060830185611275565b6112cd6080830184611275565b9695505050505050565b6000815190506112e681610c37565b92915050565b60006020828403121561130257611301610c2d565b5b6000611310848285016112d7565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061135382610bef565b915061135e83610bef565b92508282101561137157611370611319565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113e582610bef565b91506113f083610bef565b925082611400576113ff6113ab565b5b828206905092915050565b600081905092915050565b50565b600061142660008361140b565b915061143182611416565b600082019050919050565b600061144782611419565b915081905091905056fea264697066735822122065f54f65439fd80ceae48d75b22edbb0e89789d640df21efcf37a9762ce74b3464736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c80635f1b0fd81161007f57806391ad27b41161005957806391ad27b414610259578063c1af578514610284578063e55ae4e81461028e578063fd6673f5146102cb576100c2565b80635f1b0fd8146101c55780636b68c03c146101f05780636e04ff0d1461021b576100c2565b806309bc33a7146100c75780631fe543e3146100f2578063320229eb1461011b5780634585e33b14610146578063473f1ddc1461016f57806353a2c19a1461019a575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610c08565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610dbc565b61031e565b005b34801561012757600080fd5b506101306103de565b60405161013d9190610c08565b60405180910390f35b34801561015257600080fd5b5061016d60048036038101906101689190610e73565b6103e8565b005b34801561017b57600080fd5b506101846105e8565b6040516101919190610f01565b60405180910390f35b3480156101a657600080fd5b506101af610612565b6040516101bc9190610c08565b60405180910390f35b3480156101d157600080fd5b506101da610621565b6040516101e79190610c08565b60405180910390f35b3480156101fc57600080fd5b5061020561062e565b6040516102129190610f93565b60405180910390f35b34801561022757600080fd5b50610242600480360381019061023d9190611063565b610645565b60405161025092919061114f565b60405180910390f35b34801561026557600080fd5b5061026e61072d565b60405161027b9190610c08565b60405180910390f35b61028c610755565b005b34801561029a57600080fd5b506102b560048036038101906102b0919061117f565b6108c4565b6040516102c29190610f01565b60405180910390f35b3480156102d757600080fd5b506102e061090b565b6040516102ed9190610c08565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d057337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103c79291906111ac565b60405180910390fd5b6103da8282610917565b5050565b6000600154905090565b600061040260405180602001604052806000815250610645565b509050806104715747600080549050600260149054906101000a900460ff16600181111561043357610432610f1c565b5b6040517fddbb35a8000000000000000000000000000000000000000000000000000000008152600401610468939291906111d5565b60405180910390fd5b6001600260146101000a81548160ff0219169083600181111561049757610496610f1c565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610561959493929190611284565b602060405180830381600087803b15801561057b57600080fd5b505af115801561058f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b391906112ec565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b6000600260149054906101000a900460ff16905090565b600060606000600260149054906101000a900460ff16600181111561066d5761066c610f1c565b5b6000600181111561068157610680610f1c565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600154426106b59190611348565b119050600080600080549050119050600080471190508380156106d55750825b80156106de5750815b80156106e75750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f00000000000000000000000000000000000000000000000000000000000000003410156107af576040517f1eefa5a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156107c3576107c2610f1c565b5b600260149054906101000a900460ff1660018111156107e5576107e4610f1c565b5b1461081c576040517f823ea8bb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c60405160405180910390a2565b60008082815481106108d9576108d861137c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106109325761093161137c565b5b602002602001015161094491906113da565b9050600080828154811061095b5761095a61137c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260146101000a81548160ff021916908360018111156109ef576109ee610f1c565b5b0217905550600067ffffffffffffffff811115610a0f57610a0e610c79565b5b604051908082528060200260200182016040528015610a3d5781602001602082028036833780820191505090505b5060009080519060200190610a53929190610b48565b504260018190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a819061143c565b60006040518083038185875af1925050503d8060008114610abe576040519150601f19603f3d011682016040523d82523d6000602084013e610ac3565b606091505b5050905080610afe576040517f1c94012000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610bc1579160200282015b82811115610bc05782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b68565b5b509050610bce9190610bd2565b5090565b5b80821115610beb576000816000905550600101610bd3565b5090565b6000819050919050565b610c0281610bef565b82525050565b6000602082019050610c1d6000830184610bf9565b92915050565b6000604051905090565b600080fd5b600080fd5b610c4081610bef565b8114610c4b57600080fd5b50565b600081359050610c5d81610c37565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cb182610c68565b810181811067ffffffffffffffff82111715610cd057610ccf610c79565b5b80604052505050565b6000610ce3610c23565b9050610cef8282610ca8565b919050565b600067ffffffffffffffff821115610d0f57610d0e610c79565b5b602082029050602081019050919050565b600080fd5b6000610d38610d3384610cf4565b610cd9565b90508083825260208201905060208402830185811115610d5b57610d5a610d20565b5b835b81811015610d845780610d708882610c4e565b845260208401935050602081019050610d5d565b5050509392505050565b600082601f830112610da357610da2610c63565b5b8135610db3848260208601610d25565b91505092915050565b60008060408385031215610dd357610dd2610c2d565b5b6000610de185828601610c4e565b925050602083013567ffffffffffffffff811115610e0257610e01610c32565b5b610e0e85828601610d8e565b9150509250929050565b600080fd5b60008083601f840112610e3357610e32610c63565b5b8235905067ffffffffffffffff811115610e5057610e4f610e18565b5b602083019150836001820283011115610e6c57610e6b610d20565b5b9250929050565b60008060208385031215610e8a57610e89610c2d565b5b600083013567ffffffffffffffff811115610ea857610ea7610c32565b5b610eb485828601610e1d565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610eeb82610ec0565b9050919050565b610efb81610ee0565b82525050565b6000602082019050610f166000830184610ef2565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610f5c57610f5b610f1c565b5b50565b6000819050610f6d82610f4b565b919050565b6000610f7d82610f5f565b9050919050565b610f8d81610f72565b82525050565b6000602082019050610fa86000830184610f84565b92915050565b600080fd5b600067ffffffffffffffff821115610fce57610fcd610c79565b5b610fd782610c68565b9050602081019050919050565b82818337600083830152505050565b600061100661100184610fb3565b610cd9565b90508281526020810184848401111561102257611021610fae565b5b61102d848285610fe4565b509392505050565b600082601f83011261104a57611049610c63565b5b813561105a848260208601610ff3565b91505092915050565b60006020828403121561107957611078610c2d565b5b600082013567ffffffffffffffff81111561109757611096610c32565b5b6110a384828501611035565b91505092915050565b60008115159050919050565b6110c1816110ac565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111015780820151818401526020810190506110e6565b83811115611110576000848401525b50505050565b6000611121826110c7565b61112b81856110d2565b935061113b8185602086016110e3565b61114481610c68565b840191505092915050565b600060408201905061116460008301856110b8565b81810360208301526111768184611116565b90509392505050565b60006020828403121561119557611194610c2d565b5b60006111a384828501610c4e565b91505092915050565b60006040820190506111c16000830185610ef2565b6111ce6020830184610ef2565b9392505050565b60006060820190506111ea6000830186610bf9565b6111f76020830185610bf9565b6112046040830184610bf9565b949350505050565b6000819050919050565b61121f8161120c565b82525050565b600067ffffffffffffffff82169050919050565b61124281611225565b82525050565b600061ffff82169050919050565b61125f81611248565b82525050565b600063ffffffff82169050919050565b61127e81611265565b82525050565b600060a0820190506112996000830188611216565b6112a66020830187611239565b6112b36040830186611256565b6112c06060830185611275565b6112cd6080830184611275565b9695505050505050565b6000815190506112e681610c37565b92915050565b60006020828403121561130257611301610c2d565b5b6000611310848285016112d7565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061135382610bef565b915061135e83610bef565b92508282101561137157611370611319565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113e582610bef565b91506113f083610bef565b925082611400576113ff6113ab565b5b828206905092915050565b600081905092915050565b50565b600061142660008361140b565b915061143182611416565b600082019050919050565b600061144782611419565b915081905091905056fea264697066735822122065f54f65439fd80ceae48d75b22edbb0e89789d640df21efcf37a9762ce74b3464736f6c63430008090033",
  "devdoc": {
    "author": "DEFIdaniel",
    "details": "This implements Chainlink VRF v2 and Chainlink Keepers",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This function uses chainlink keeper node calls   When it returns true, can execute the lottery function"
      },
      "performUpkeep(bytes)": {
        "details": "Once `checkUpkeep` is returning `true`, this function is called and it kicks off a Chainlink VRF call to get a random winner."
      }
    },
    "title": "A sample lottery contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is for an untamperable, decentralized contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 243,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 262,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 264,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 267,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lotteryState",
        "offset": 20,
        "slot": "2",
        "type": "t_enum(LotteryState)238"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(LotteryState)238": {
        "encoding": "inplace",
        "label": "enum Lottery.LotteryState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}